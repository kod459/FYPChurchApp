@model PIMS.Entities.Appointments

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Appointment</h2>
<div id="calendar"></div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Appointments</h4>
        <hr />
        @Html.HiddenFor(model => model.AppointmentId)
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.DetailsOfAppointment, "Appointment Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DetailsOfAppointment", ViewBag.Details as SelectList, new { })
                @Html.ValidationMessageFor(model => model.DetailsOfAppointment, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.AdministrationId, "Parish Admin", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AdministrationId", ViewBag.AdminId as SelectList, new { })
                @Html.ValidationMessageFor(model => model.AdministrationId, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.ChurchId, "Church Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ChurchId", null, htmlAttributes: new { })
                @Html.ValidationMessageFor(model => model.ChurchId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfAppointment, "Date of Appointment", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfAppointment, new { @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.DateOfAppointment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RoomType, "Room Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RoomType", ViewBag.Rooms as SelectList, new { @class = "form-data" })
                @Html.ValidationMessageFor(model => model.RoomType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NameOfApplicant, "Name of Applicant", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NameOfApplicant)
                @Html.ValidationMessageFor(model => model.NameOfApplicant, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApplicantEmail, "Email of Applicant", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApplicantEmail)
                @Html.ValidationMessageFor(model => model.ApplicantEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApplicantPhoneNumber, "Phone Number of Applicant", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApplicantPhoneNumber)
                @Html.ValidationMessageFor(model => model.ApplicantPhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update Appointment" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    <u>
        @Html.ActionLink("Back to List", "Index")
    </u>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.print.css" rel="stylesheet" media="print" />

<script>

    $(document).ready(function () {
        var events = [];
        var dateToday = new Date();
        $.ajax({
            type: "GET",
            url: "/Appointments/UnAvailableSlots",
            success: function (data) {
                $.each(data, function (i, v) {
                    events.push({
                        details: v.DetailsOfAppointment,
                        date: moment(v.DateOfAppointment),
                        room: v.RoomType,
                        confirmed: v.Confirmed,
                        colour: v.ThemeColour,
                        church: v.Church.Name,
                        parishAdminName: v.Admins.AdministratorName,
                        parishAdminUser: v.Admins.AdminUsername,
                        parishAdminId: v.Admins.AdministratorId,
                        fee: v.Fee,
                        id: v.AppointmentId
                    })

                })
                GenerateCalender(events);
            },
            error: function (error) {
                alert("failed");
                console.log(error);
            }
        })

        function GenerateCalender(events) {
            $('#calendar').fullCalendar({
                viewRender: function (currentView) {
                    var minDate = moment(),
                        maxDate = moment().add(2, 'weeks');
                    // Past
                    if (minDate >= currentView.start && minDate <= currentView.end) {
                        $(".fc-prev-button").prop('disabled', true);
                        $(".fc-prev-button").addClass('fc-state-disabled');
                    }
                    else {
                        $(".fc-prev-button").removeClass('fc-state-disabled');
                        $(".fc-prev-button").prop('disabled', false);
                    }
                    // Future
                    if (maxDate >= currentView.start && maxDate <= currentView.end) {
                        $(".fc-next-button").prop('disabled', true);
                        $(".fc-next-button").addClass('fc-state-disabled');
                    } else {
                        $(".fc-next-button").removeClass('fc-state-disabled');
                        $(".fc-next-button").prop('disabled', false);
                    }
                },
                contentHeight: 300,
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'basicWeek, agenda'
                },
                dayClick: function (date, allDay, jsEvent, view) {
                    if (allDay) {
                        if (date.isBefore(moment())) {
                            alert('Appointment cannot be booked!');
                        }
                        else {
                            var d = document.getElementById("DateOfAppointment");
                            d.value = date.format("DD/MM/YYYY HH:mm");
                            $('#calendar').fullCalendar('removeEvents');
                            $('#calendar').fullCalendar('rerenderEvents')
                            var eventData;
                            eventData = {
                                date: date
                            };
                            $('#calendar').fullCalendar('renderEvent', eventData, true);
                        }

                    }
                },

                eventOverlap: false,
                slotDuration: '00:15:00',
                defaultView: "agenda",
                defaultDate: moment(),
                minTime: "09:00:00",
                maxTime: "17:00:00",
                timeFormat: 'HH:mm',
                eventLimit: true,
                selectable: true,
                unselectAuto: false,
                defaultTimedEventDuration: '00:30:00',
                eventColor: events.ThemeColour,
                events: events,
                eventRender: function (event, element) {
                    if (event.fee == null) {
                        if (event.confirmed == false) {
                            element.css('background-color', '#FF0000');
                            element.css('border-color', '#FF0000');
                        }
                        else {
                            element.css('background-color', '#008000');
                            element.css('border-color', '#008000');
                        }
                    }
                    else {
                        element.css('background-color', '#0000FF');
                        element.css('border-color', '#0000FF');
                    }

                }

            })

            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            var timeNow = new Date();


            if (dd < 10) {
                dd = '0' + dd
            }

            if (mm < 10) {
                mm = '0' + mm
            }

            today = mm + '/' + dd + '/' + yyyy;
            $('#calendar').fullCalendar('gotoDate', today);

        }
    })
</script>

